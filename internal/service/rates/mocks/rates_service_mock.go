// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/rates/service_for_rates.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/NastyaGoryachaya/crypto-rate-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCoinReader is a mock of CoinReader interface.
type MockCoinReader struct {
	ctrl     *gomock.Controller
	recorder *MockCoinReaderMockRecorder
}

// MockCoinReaderMockRecorder is the mock recorder for MockCoinReader.
type MockCoinReaderMockRecorder struct {
	mock *MockCoinReader
}

// NewMockCoinReader creates a new mock instance.
func NewMockCoinReader(ctrl *gomock.Controller) *MockCoinReader {
	mock := &MockCoinReader{ctrl: ctrl}
	mock.recorder = &MockCoinReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinReader) EXPECT() *MockCoinReaderMockRecorder {
	return m.recorder
}

// GetAllCoins mocks base method.
func (m *MockCoinReader) GetAllCoins(ctx context.Context) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoins", ctx)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoins indicates an expected call of GetAllCoins.
func (mr *MockCoinReaderMockRecorder) GetAllCoins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoins", reflect.TypeOf((*MockCoinReader)(nil).GetAllCoins), ctx)
}

// GetCoinBySymbol mocks base method.
func (m *MockCoinReader) GetCoinBySymbol(ctx context.Context, symbol string) (*domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinBySymbol indicates an expected call of GetCoinBySymbol.
func (mr *MockCoinReaderMockRecorder) GetCoinBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinBySymbol", reflect.TypeOf((*MockCoinReader)(nil).GetCoinBySymbol), ctx, symbol)
}

// MockPriceReader is a mock of PriceReader interface.
type MockPriceReader struct {
	ctrl     *gomock.Controller
	recorder *MockPriceReaderMockRecorder
}

// MockPriceReaderMockRecorder is the mock recorder for MockPriceReader.
type MockPriceReaderMockRecorder struct {
	mock *MockPriceReader
}

// NewMockPriceReader creates a new mock instance.
func NewMockPriceReader(ctrl *gomock.Controller) *MockPriceReader {
	mock := &MockPriceReader{ctrl: ctrl}
	mock.recorder = &MockPriceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceReader) EXPECT() *MockPriceReaderMockRecorder {
	return m.recorder
}

// GetLatestPrice mocks base method.
func (m *MockPriceReader) GetLatestPrice(ctx context.Context, coinSymbol string) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPrice", ctx, coinSymbol)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPrice indicates an expected call of GetLatestPrice.
func (mr *MockPriceReaderMockRecorder) GetLatestPrice(ctx, coinSymbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPrice", reflect.TypeOf((*MockPriceReader)(nil).GetLatestPrice), ctx, coinSymbol)
}

// GetMinAndMaxPrices mocks base method.
func (m *MockPriceReader) GetMinAndMaxPrices(ctx context.Context, coinSymbol string, since time.Time) (domain.Price, domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinAndMaxPrices", ctx, coinSymbol, since)
	ret0, _ := ret[0].(domain.Price)
	ret1, _ := ret[1].(domain.Price)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMinAndMaxPrices indicates an expected call of GetMinAndMaxPrices.
func (mr *MockPriceReaderMockRecorder) GetMinAndMaxPrices(ctx, coinSymbol, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinAndMaxPrices", reflect.TypeOf((*MockPriceReader)(nil).GetMinAndMaxPrices), ctx, coinSymbol, since)
}

// GetPriceBefore mocks base method.
func (m *MockPriceReader) GetPriceBefore(ctx context.Context, coinSymbol string, before time.Time) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceBefore", ctx, coinSymbol, before)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceBefore indicates an expected call of GetPriceBefore.
func (mr *MockPriceReaderMockRecorder) GetPriceBefore(ctx, coinSymbol, before interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceBefore", reflect.TypeOf((*MockPriceReader)(nil).GetPriceBefore), ctx, coinSymbol, before)
}
