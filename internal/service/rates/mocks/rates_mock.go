// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/rates.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/NastyaGoryachaya/crypto-rate-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCryptoProvider is a mock of CryptoProvider interface.
type MockCryptoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoProviderMockRecorder
}

// MockCryptoProviderMockRecorder is the mock recorder for MockCryptoProvider.
type MockCryptoProviderMockRecorder struct {
	mock *MockCryptoProvider
}

// NewMockCryptoProvider creates a new mock instance.
func NewMockCryptoProvider(ctrl *gomock.Controller) *MockCryptoProvider {
	mock := &MockCryptoProvider{ctrl: ctrl}
	mock.recorder = &MockCryptoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoProvider) EXPECT() *MockCryptoProviderMockRecorder {
	return m.recorder
}

// FetchRates mocks base method.
func (m *MockCryptoProvider) FetchRates(ctx context.Context) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRates", ctx)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRates indicates an expected call of FetchRates.
func (mr *MockCryptoProviderMockRecorder) FetchRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRates", reflect.TypeOf((*MockCryptoProvider)(nil).FetchRates), ctx)
}

// MockIngestion is a mock of Ingestion interface.
type MockIngestion struct {
	ctrl     *gomock.Controller
	recorder *MockIngestionMockRecorder
}

// MockIngestionMockRecorder is the mock recorder for MockIngestion.
type MockIngestionMockRecorder struct {
	mock *MockIngestion
}

// NewMockIngestion creates a new mock instance.
func NewMockIngestion(ctrl *gomock.Controller) *MockIngestion {
	mock := &MockIngestion{ctrl: ctrl}
	mock.recorder = &MockIngestionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngestion) EXPECT() *MockIngestionMockRecorder {
	return m.recorder
}

// FetchAndSaveCurrency mocks base method.
func (m *MockIngestion) FetchAndSaveCurrency(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndSaveCurrency", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAndSaveCurrency indicates an expected call of FetchAndSaveCurrency.
func (mr *MockIngestionMockRecorder) FetchAndSaveCurrency(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndSaveCurrency", reflect.TypeOf((*MockIngestion)(nil).FetchAndSaveCurrency), ctx)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAllCoins mocks base method.
func (m *MockStorage) GetAllCoins(ctx context.Context) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoins", ctx)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoins indicates an expected call of GetAllCoins.
func (mr *MockStorageMockRecorder) GetAllCoins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoins", reflect.TypeOf((*MockStorage)(nil).GetAllCoins), ctx)
}

// GetCoinBySymbol mocks base method.
func (m *MockStorage) GetCoinBySymbol(ctx context.Context, symbol string) (domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinBySymbol", ctx, symbol)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinBySymbol indicates an expected call of GetCoinBySymbol.
func (mr *MockStorageMockRecorder) GetCoinBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinBySymbol", reflect.TypeOf((*MockStorage)(nil).GetCoinBySymbol), ctx, symbol)
}

// History mocks base method.
func (m *MockStorage) History(ctx context.Context, symbol string, from, to time.Time) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", ctx, symbol, from, to)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockStorageMockRecorder) History(ctx, symbol, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockStorage)(nil).History), ctx, symbol, from, to)
}

// SaveCoins mocks base method.
func (m *MockStorage) SaveCoins(ctx context.Context, items []domain.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCoins", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCoins indicates an expected call of SaveCoins.
func (mr *MockStorageMockRecorder) SaveCoins(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCoins", reflect.TypeOf((*MockStorage)(nil).SaveCoins), ctx, items)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetLatest mocks base method.
func (m *MockService) GetLatest(ctx context.Context) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", ctx)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockServiceMockRecorder) GetLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockService)(nil).GetLatest), ctx)
}

// GetLatestBySymbol mocks base method.
func (m *MockService) GetLatestBySymbol(ctx context.Context, symbol string, from, to time.Time) (domain.Coin, float64, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBySymbol", ctx, symbol, from, to)
	ret0, _ := ret[0].(domain.Coin)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetLatestBySymbol indicates an expected call of GetLatestBySymbol.
func (mr *MockServiceMockRecorder) GetLatestBySymbol(ctx, symbol, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBySymbol", reflect.TypeOf((*MockService)(nil).GetLatestBySymbol), ctx, symbol, from, to)
}
