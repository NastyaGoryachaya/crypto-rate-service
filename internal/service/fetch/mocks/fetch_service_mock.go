// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/fetch/fetch_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/NastyaGoryachaya/crypto-rate-service/internal/domain"
	fetch "github.com/NastyaGoryachaya/crypto-rate-service/internal/service/fetch"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchAndSaveCurrency mocks base method.
func (m *MockService) FetchAndSaveCurrency(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndSaveCurrency", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAndSaveCurrency indicates an expected call of FetchAndSaveCurrency.
func (mr *MockServiceMockRecorder) FetchAndSaveCurrency(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndSaveCurrency", reflect.TypeOf((*MockService)(nil).FetchAndSaveCurrency), ctx)
}

// MockRatesProvider is a mock of RatesProvider interface.
type MockRatesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRatesProviderMockRecorder
}

// MockRatesProviderMockRecorder is the mock recorder for MockRatesProvider.
type MockRatesProviderMockRecorder struct {
	mock *MockRatesProvider
}

// NewMockRatesProvider creates a new mock instance.
func NewMockRatesProvider(ctrl *gomock.Controller) *MockRatesProvider {
	mock := &MockRatesProvider{ctrl: ctrl}
	mock.recorder = &MockRatesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatesProvider) EXPECT() *MockRatesProviderMockRecorder {
	return m.recorder
}

// FetchRates mocks base method.
func (m *MockRatesProvider) FetchRates(ctx context.Context) ([]fetch.RateQuote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRates", ctx)
	ret0, _ := ret[0].([]fetch.RateQuote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRates indicates an expected call of FetchRates.
func (mr *MockRatesProviderMockRecorder) FetchRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRates", reflect.TypeOf((*MockRatesProvider)(nil).FetchRates), ctx)
}

// MockCoinReader is a mock of CoinReader interface.
type MockCoinReader struct {
	ctrl     *gomock.Controller
	recorder *MockCoinReaderMockRecorder
}

// MockCoinReaderMockRecorder is the mock recorder for MockCoinReader.
type MockCoinReaderMockRecorder struct {
	mock *MockCoinReader
}

// NewMockCoinReader creates a new mock instance.
func NewMockCoinReader(ctrl *gomock.Controller) *MockCoinReader {
	mock := &MockCoinReader{ctrl: ctrl}
	mock.recorder = &MockCoinReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinReader) EXPECT() *MockCoinReaderMockRecorder {
	return m.recorder
}

// GetAllCoins mocks base method.
func (m *MockCoinReader) GetAllCoins(ctx context.Context) ([]domain.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCoins", ctx)
	ret0, _ := ret[0].([]domain.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCoins indicates an expected call of GetAllCoins.
func (mr *MockCoinReaderMockRecorder) GetAllCoins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCoins", reflect.TypeOf((*MockCoinReader)(nil).GetAllCoins), ctx)
}

// MockPriceWriter is a mock of PriceWriter interface.
type MockPriceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPriceWriterMockRecorder
}

// MockPriceWriterMockRecorder is the mock recorder for MockPriceWriter.
type MockPriceWriterMockRecorder struct {
	mock *MockPriceWriter
}

// NewMockPriceWriter creates a new mock instance.
func NewMockPriceWriter(ctrl *gomock.Controller) *MockPriceWriter {
	mock := &MockPriceWriter{ctrl: ctrl}
	mock.recorder = &MockPriceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceWriter) EXPECT() *MockPriceWriterMockRecorder {
	return m.recorder
}

// SavePrice mocks base method.
func (m *MockPriceWriter) SavePrice(ctx context.Context, price domain.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePrice", ctx, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePrice indicates an expected call of SavePrice.
func (mr *MockPriceWriterMockRecorder) SavePrice(ctx, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePrice", reflect.TypeOf((*MockPriceWriter)(nil).SavePrice), ctx, price)
}
